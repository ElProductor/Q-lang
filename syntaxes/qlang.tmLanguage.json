{
  "scopeName": "source.qlang",
  "name": "QLang",
  "fileTypes": ["qlg", "qlang"],
  "uuid": "qlang-syntax-highlighting-v1.1",
  "patterns": [
    {
      "match": "\\b(Qubit|Measure|H|CX|QuantumMeasure|StateChange|GetData|SensorData|QuantumSensor|QuantumCalculate|ClassicalCalculate|ResetQubit|ApplyGate|Teleport)\\b",
      "name": "keyword.control.quantum.qlang"
    },
    {
      "match": "\\b(if|else|while|for|return|break|continue)\\b",
      "name": "keyword.control.flow.qlang"
    },
    {
      "match": "\\b(true|false)\\b",
      "name": "constant.language.boolean.qlang"
    },
    {
      "match": "\\b(null|None)\\b",
      "name": "constant.language.null.qlang"
    },
    {
      "match": "\\b([A-Z][A-Za-z0-9_]*)\\b",
      "name": "support.type.qlang"
    },
    {
      "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*(?=\\()",
      "name": "entity.name.function.qlang"
    },
    {
      "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b",
      "name": "variable.other.qlang"
    },
    {
      "match": "(\\+|\\-|\\*|\\/|=|==|!=|<|>|<=|>=|&&|\\|\\||!)",
      "name": "keyword.operator.qlang"
    },
    {
      "match": "\\b\\d+\\.?\\d*\\b",
      "name": "constant.numeric.qlang"
    },
    {
      "match": "\"(?:[^\"\\\\]|\\\\.)*\"",
      "name": "string.quoted.double.qlang"
    },
    {
      "match": "//.*$",
      "name": "comment.line.double-slash.qlang"
    },
    {
      "match": "/\\*.*?\\*/",
      "name": "comment.block.qlang"
    },
    {
      "match": "\\b(ERROR|WARNING|CRITICAL)\\b",
      "name": "invalid.illegal.error.qlang"
    }
  ]
}
